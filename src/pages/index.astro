---
import H1 from "../components/H1.astro";
import AudioPlayer from "../components/AudioPlayer.astro";
import Container from "../components/Container.astro";
import BaseLayout from "../layouts/BaseLayout.astro";

import { getAuth } from "firebase-admin/auth";
import { getStorage } from "firebase-admin/storage";

import { TOKEN } from "@constants/cookies";
import { BUCKET_NAME } from "@constants/firebase";
import { serverApp } from "@scripts/firebase/initServer";
import Empty from "@components/Empty.astro";
import LinkCTA from "@components/LinkCTA.astro";

const storage = getStorage(serverApp);

// Get client token
const url = new URL(Astro.request.url);
const urlTokenParam = url.searchParams.get("token");

const cookieToken = Astro.cookies.get(TOKEN);
const token = urlTokenParam || cookieToken.value;

if (!token) {
  // Unauthorised user
  return Astro.redirect("/signin");
}

const auth = getAuth(serverApp);
let audibles: { url: string; timeCreated: string }[] = [];

try {
  await auth.verifyIdToken(token);

  Astro.cookies.set(TOKEN, token, {
    path: "/",
    httpOnly: true,
  });

  try {
    // get all files
    const bucket = storage.bucket(BUCKET_NAME);
    const [files] = await bucket.getFiles();

    audibles = await Promise.all(
      files.map(async (file) => {
        const [metadata] = await file.getMetadata();

        return {
          url: file.publicUrl(),
          timeCreated: metadata.timeCreated,
        };
      })
    );
  } catch (error) {
    console.error(error);
    console.error("Error fetching audibles");
    return Astro.redirect("/signin");
  }
} catch (error) {
  console.error("Could not decode token", {
    fromCookie: !!cookieToken.value,
    fromUrl: !!urlTokenParam,
  });

  return Astro.redirect("/signin");
}
---

<BaseLayout isPrivatePage>
  <Container>
    <H1>Hear what the world's saying</H1>
    <p class="text-lg dark:text-slate-200 pb-7 pt-1">
      Discover the voices of the world. Simply listen.
    </p>

    <div class="flex flex-col items-center">
      {
        audibles.length === 0 ? (
          <>
            <Empty />
            <LinkCTA href="/record">Record</LinkCTA>
          </>
        ) : (
          audibles
            .sort((a, b) =>
              new Date(a.timeCreated) < new Date(b.timeCreated) ? 1 : -1
            )
            .map((audible) => (
              <AudioPlayer
                url={audible.url}
                timeCreated={audible.timeCreated}
              />
            ))
        )
      }
    </div>
  </Container>
</BaseLayout>

<script>
  // Enhancement: remove token from URL after page's parsed.
  const url = new URL(window.location.href);
  const urlTokenParam = url.searchParams.get("token");

  if (urlTokenParam) {
    url.searchParams.delete("token");

    window.history.pushState({}, "", url.href);
  }
</script>
