---
import AudioPlayer from "../components/AudioPlayer.astro";
import Container from "../components/Container.astro";
import H1 from "../components/H1.astro";
import BaseLayout from "../layouts/BaseLayout.astro";

const audibles = new Array(10).fill(1);

import { getAuth } from "firebase-admin/auth";
import { serverApp } from "@scripts/firebase/initServer";

/**
 * When a user or device successfully signs in, Firebase creates a corresponding ID token that uniquely identifies them and grants them access to several resources, such as Firebase Realtime Database and Cloud Storage. You can re-use that ID token to identify the user or device on your custom backend server.
 * NB:  Firebase ID tokens are short lived and last for an hour
 */

// Get client token
const url = new URL(Astro.request.url);
const urlTokenParam = url.searchParams.get("token");
const cookieToken = Astro.cookies.get("X-Token");
const token = urlTokenParam || cookieToken.value;

if (!token) {
  // Unauthorised user
  return Astro.redirect("/signin");
}

const auth = getAuth(serverApp);

try {
  await auth.verifyIdToken(token);

  Astro.cookies.set("X-Token", token, {
    path: "/",
    httpOnly: true,
  });
} catch (error) {
  console.error("Could not decode token");
  return Astro.redirect("/signin");
}
---

<BaseLayout isPrivatePage>
  <Container>
    <H1>Hear what the world's saying</H1>
    <p class="text-lg dark:text-slate-200 pb-7 pt-1">
      Discover the voices of the world. Simply listen.
    </p>

    <div class="flex flex-col items-center">
      {audibles.map(() => <AudioPlayer />)}
    </div>
  </Container>
</BaseLayout>

<script>
  // Enhancement: remove token from URL after page's parsed.
  const url = new URL(window.location.href);
  const urlTokenParam = url.searchParams.get("token");

  if (urlTokenParam) {
    url.searchParams.delete("token");

    window.history.pushState({}, "", url.href);
  }
</script>
